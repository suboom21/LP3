import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.cbook import boxplot_stats
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from geopy import point,distance
from math import *
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
import plotly.express as px
import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv("uber.csv")

df

df.head()

df=df.drop(["Unnamed: 0","key"],axis=1)

df

df.info()

df["pickup_datetime"]=pd.to_datetime(df["pickup_datetime"],errors="coerce")

df.isna().sum()

df=df.dropna()

df.isna().sum()

df.describe().T

def distance_transform(longitude1,latitude1,longitude2,latitude2):
    distance=[]
    for pos in range(len(longitude1)):
        longi1,lati1,longi2,lati2=map(radians,[longitude1[pos],latitude1[pos],longitude2[pos],latitude2[pos]])
        dist_longi=longi2-longi1
        dist_lati=lati2-lati1
        a= sin(dist_lati/2)**2+ cos(lati1) * cos(lati2) * sin(dist_longi/2)**2
        c=asin(sqrt(a))*6371
        distance.append(c)
    return distance

df["distance_km"]=distance_transform(df["pickup_longitude"].to_numpy(),df["pickup_latitude"].to_numpy(),df["dropoff_longitude"].to_numpy(),df["dropoff_latitude"].to_numpy())

df=df.assign(pickup_hr=df.pickup_datetime.dt.hour,
            date=df.pickup_datetime.dt.date,
            month=df.pickup_datetime.dt.month,
            year=df.pickup_datetime.dt.year,
            day_of_week=df.pickup_datetime.dt.day_of_week,
            day_name=df.pickup_datetime.dt.day_name())

df.head()

def find_outliers(df):
    q1=df.quantile(0.25)
    q3=df.quantile(0.75)
    IQR=q3-q1
    outliers = df[((df<(q1-1.5*IQR)) | (df>(q3+1.5*IQR)))]
    return outliers

outliers = find_outliers(df['fare_amount'])
print('number of outliers:' + str(len(outliers)))
print('max outlier value:' + str(outliers.max()))
print('min outlier value:' + str(outliers.min()))
outliers

outliers=find_outliers(df["passenger_count"])
print("number of outliers = ",len(outliers))
print("maximum outlier value = ",outliers.max())
print("minimum outlier value = ",outliers.min()) 
outliers

df.drop(df[df['distance_km'] == 0].index, inplace = True)
df.drop(df[df['distance_km'] > 60].index, inplace = True)
df.drop(df[df['fare_amount'] > 100].index, inplace = True)
df.drop(df[df['fare_amount'] < 0].index, inplace = True)
df.drop(df[df['passenger_count'] > 6].index, inplace = True)

new_df=df.select_dtypes(include="number")

plt.figure(figsize=(12,10))
sns.heatmap(new_df.corr(),annot=True)
plt.show()

x=df[["year","distance_km"]]
y=df[["fare_amount"]]

scaler=StandardScaler()

x=scaler.fit_transform(x)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)

model=LinearRegression()
model.fit(x_train,y_train)

y_pred=model.predict(x_test)

sns.regplot(x=y_test, y=y_pred, color="red", line_kws={"color" : "blue"})
plt.show()

print("Mean absolute error = ",metrics.mean_absolute_error(y_test,y_pred))
print("Mean squared error = ",metrics.mean_squared_error(y_test,y_pred))
print("root Mean squared error = ",sqrt(metrics.mean_absolute_error(y_test,y_pred)))

model=RandomForestRegressor()

model.fit(x_train,y_train)

y_pred=model.predict(x_test)

sns.regplot(x=y_test,y=y_pred,color="red",line_kws={"color":"blue"})
plt.show()

print("Mean absolute error = ",metrics.mean_absolute_error(y_test,y_pred))
print("Mean squared error = ",metrics.mean_squared_error(y_test,y_pred))
print("root Mean squared error = ",sqrt(metrics.mean_absolute_error(y_test,y_pred)))
